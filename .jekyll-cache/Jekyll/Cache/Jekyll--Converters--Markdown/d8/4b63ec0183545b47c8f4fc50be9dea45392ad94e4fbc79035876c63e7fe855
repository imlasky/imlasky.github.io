I"+	<h2 id="slc---simple-lovable-and-complete">SLC - Simple, Lovable, and Complete</h2>
<p>I read a post a little while ago on Bearblog called <a href="https://herman.bearblog.dev/mvp-vs-slc/">“Why products should be ‘slick’, not just viable”</a>, and it really resonated with me.</p>

<p>Instead of using MVP (minimum viable product) as the measure of an incremental unit of a product, he uses SLC (simple, lovable, and complete). In essence, SLC is the idea that the product should be complete from the onset – that even though there <em>could</em> be more added to the product, it doesn’t necessarily need to in order to operate as its main function.</p>

<p>However, the key difference between SLC and MVP, in my eyes, is the L – lovable. Take, for instance, ChatGPT. It’s a cha box. That’s it. Chat has been around forever. The design is not new.</p>

<p>But it’s lovable. It was (until Threads, maybe) the fastest growing service ever because it was just that good.</p>

<h2 id="i-am-the-only-user">I am the only user</h2>
<p>There’s another idea that also resonated - <a href="https://blubsblog.bearblog.dev/i-am-the-only-user/">being the only user.</a>From this one, I gained the insight that my products that I have developed previously were for some ephemeral “user” that I thought I identified with. However, when developing the product, I quickly became aware that I wouldn’t use this it ever, let alone <em>pay</em> for it.</p>

<p>So, I started to truly look for problems in my own life, ones that I actually become angry at because “why is it like this? How has there been <strong><em>nothing</em></strong> to solve this yet?”</p>

<p>I’ve found 2 problems and because they were <em>truly</em> my problems, I was able to quickly solve them.</p>

<h2 id="bringing-it-together">Bringing it together</h2>

<p>The last thing I have learned is that it really is that these two concepts work in tandem with each other. To build something SLC, I first have to build something that I would love. It doesn’t have to be complete for me, but I should make sure that it is complete for others, if I want to share it, without ruining the simplicity of the hacky solution.</p>

<p>So, first develop for yourself. Solve your pain points. Then, keep the simplicity, finish the thing, and make it lovable to use.</p>
:ET